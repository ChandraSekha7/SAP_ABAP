*&---------------------------------------------------------------------*
*& Include ZQM_PRODUCT_LIFE_CYCLE_I02
*&---------------------------------------------------------------------*
CLASS lcl_life_cycle DEFINITION DEFERRED.

DATA:
  gt_fieldcat   TYPE lvc_t_fcat,
  gt_sort       TYPE lvc_t_sort,
  go_obj_ccont  TYPE REF TO cl_gui_custom_container,
  go_alv        TYPE REF TO cl_gui_alv_grid,
  go_pi_cont    TYPE REF TO cl_gui_custom_container,
  go_pi_chart   TYPE REF TO cl_gui_alv_grid,
  go_life_cycle TYPE REF TO lcl_life_cycle,
  ok_code       LIKE sy-ucomm,
  gv_matnr      TYPE mcha-matnr,
  gv_werks      TYPE mcha-werks,
  gv_charg      TYPE mcha-charg,
  y_values      TYPE TABLE OF gprval WITH HEADER LINE,
  x_texts       TYPE TABLE OF gprtxt WITH HEADER LINE,
  gf_yield      TYPE p DECIMALS 3,
  gf_scrap      TYPE p DECIMALS 3,
  acc_loss      TYPE p DECIMALS 3,
  un_acc_loss   TYPE p DECIMALS 3,
  yield         TYPE p DECIMALS 3,
  sample        TYPE p DECIMALS 3,
  time_hold     TYPE p DECIMALS 3.


TYPES : BEGIN OF ty_screen,
          p1 TYPE char15,
          p2 TYPE char15,
          p3 TYPE char15,
          p4 TYPE char15,
          p5 TYPE char15,
        END OF ty_screen.

DATA : gs_screen TYPE ty_screen.

SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE TEXT-001.


  SELECT-OPTIONS:
                 so_matnr FOR gv_matnr,
                 so_werks FOR gv_werks NO INTERVALS OBLIGATORY,
                 so_charg FOR gv_charg .
SELECTION-SCREEN END OF BLOCK b1.

CLASS lcl_life_cycle DEFINITION.
  PUBLIC SECTION.

    TYPES:

      BEGIN OF ty_mcha,
        matnr TYPE mcha-matnr,
        werks TYPE mcha-werks,
        charg TYPE mcha-charg,
      END OF ty_mcha,

      BEGIN OF ty_mara,
        matnr TYPE mara-matnr,
        mtart TYPE mara-mtart,
      END OF ty_mara,

      BEGIN OF ty_afpo,
        charg TYPE afpo-charg,
        aufnr TYPE afpo-aufnr,
        matnr TYPE afpo-matnr,
      END OF ty_afpo,

      BEGIN OF ty_caufv_jest,
        caufv_aufnr TYPE caufv-aufnr,
        caufv_objnr TYPE caufv-objnr,
        jest_objnr  TYPE jest-objnr,
        jest_stat   TYPE jest-stat,
        jest_inact  TYPE jest-inact,
      END OF ty_caufv_jest,

      BEGIN OF ty_mcha_mara_afpo,
        plant         TYPE mcha-werks,
        batch_no      TYPE mcha-charg,
        material      TYPE mcha-matnr,
        material_type TYPE mara-mtart,
        order_number  TYPE afpo-aufnr,
        object_number TYPE caufv-objnr,
        status_code   TYPE jest-stat,
        status        TYPE jest-inact,
      END OF ty_mcha_mara_afpo,

      BEGIN OF ty_resb_mara,
        bulk_order_tablet TYPE resb-aufnr,
        powder_material   TYPE resb-matnr,
        bulk_powder_batch TYPE resb-charg,
        mara_material     TYPE mara-matnr,
        material_type     TYPE mara-mtart,
      END OF ty_resb_mara,

      BEGIN OF ty_internal_table,
*        plant                   TYPE mcha-werks,
        batch_no             TYPE mcha-charg,
        material             TYPE mcha-matnr,
        material_type        TYPE mara-mtart,
        order_number         TYPE afpo-aufnr,
        bulk_powder_batch    TYPE resb-charg,
        powder_material      TYPE resb-matnr,
        powder_order_number  TYPE afpo-aufnr,
        powder_material_type TYPE mara-mtart,
      END OF ty_internal_table,

      BEGIN OF ty_bulk_data,
        order_number      TYPE afru-aufnr,
        reversed          TYPE afru-stokz,
        cancelled         TYPE afru-stzhl,
        in_confirmation   TYPE afru-rueck,
        in_counter        TYPE afru-rmzhl,
        activity          TYPE afru-vornr,
        out_confirmation  TYPE cocf_conf_qty-rueck,
        out_counter       TYPE cocf_conf_qty-rmzhl,
        in_layout         TYPE cocf_conf_qty-layout,
        in_sequence       TYPE cocf_conf_qty-counter,
        qty_conf          TYPE cocf_conf_qty-quant,
        confirmation_unit TYPE cocf_conf_qty-unit,
        out_layout        TYPE cocf_cu_q_lint-layout,
        out_sequence      TYPE cocf_cu_q_lint-counter,
        description       TYPE cocf_cu_q_lint-ktext,
      END OF ty_bulk_data,

      BEGIN OF ty_bulk_data_copy,
        order_number      TYPE afru-aufnr,
        activity          TYPE afru-vornr,
        out_sequence      TYPE cocf_cu_q_lint-counter,
        qty_conf          TYPE cocf_conf_qty-quant,
        confirmation_unit TYPE cocf_conf_qty-unit,
      END OF ty_bulk_data_copy,

      BEGIN OF ty_caufv,
        order_no      TYPE caufv-aufnr,

        planned_yeild TYPE caufv-igmng,

      END OF ty_caufv,



      BEGIN OF ty_final_table,

        order_number          TYPE afru-aufnr,

        batch                 TYPE mcha-charg,
        material              TYPE mcha-matnr,
        phase                 TYPE afru-vornr,
        operation_description TYPE plpo-ltxa1,
        yield                 TYPE cocf_conf_qty-quant,
        y_uom                 TYPE cocf_conf_qty-unit,
        accountable_loss      TYPE cocf_conf_qty-quant,
        a_uom                 TYPE cocf_conf_qty-unit,
        un_accountable_loss   TYPE cocf_conf_qty-quant,
        u_uom                 TYPE cocf_conf_qty-unit,
        quality_sample        TYPE cocf_conf_qty-quant,
        q_uom                 TYPE cocf_conf_qty-unit,
        hold_time_study       TYPE cocf_conf_qty-quant,
        h_uom                 TYPE cocf_conf_qty-unit,
        net_yield             TYPE cocf_conf_qty-quant,
        n_uom                 TYPE cocf_conf_qty-unit,
        acc_loss              TYPE cocf_conf_qty-quant,
      END OF ty_final_table,

      BEGIN OF ty_disc,
        material            TYPE mapl-matnr,
        plant               TYPE mapl-werks,
        tasklisttypea       TYPE mapl-plnty,
        in_tgroup           TYPE mapl-plnnr,
        in_group_counter    TYPE mapl-plnal,
        tasklisttypeb       TYPE mapl-plnty,
        inter_tgroup        TYPE mapl-plnnr,
        inter_group_counter TYPE mapl-plnal,
        del_ind             TYPE plas-loekz,
        noded               TYPE plas-plnkn,
        in_noded            TYPE plpo-plnkn,
        out_tgroup          TYPE plpo-plnnr,
        activity            TYPE plpo-vornr,
        tasklisttypec       TYPE plpo-plnty,
        dis                 TYPE plpo-ltxa1,
      END OF ty_disc,

      BEGIN OF ty_disc_copy,
        material TYPE mapl-matnr,
        plant    TYPE mapl-werks,
        activity TYPE plpo-vornr,
        dis      TYPE plpo-ltxa1,
      END OF ty_disc_copy,



      BEGIN OF ty_qals,
        order_number    TYPE qals-aufnr,
        inspection_type TYPE qals-art,
        quality_sample  TYPE qals-lmenge03,
        hold_time_study TYPE qals-lmenge08,
      END OF ty_qals,

      BEGIN OF ty_pie_data,
        yield               TYPE cocf_conf_qty-quant,
        batch               TYPE mcha-charg,
        material            TYPE mcha-matnr,

        order_number        TYPE afru-aufnr,
        planned_yeild       TYPE cocf_conf_qty-quant,

        accountable_loss    TYPE cocf_conf_qty-quant,
        un_accountable_loss TYPE cocf_conf_qty-quant,
        quality_sample      TYPE cocf_conf_qty-quant,
        hold_time_study     TYPE cocf_conf_qty-quant,
        total_loss          TYPE cocf_conf_qty-quant,
        yeild_percent(15)   TYPE p DECIMALS 3,
        scrap_percent(15)   TYPE p DECIMALS 3,
        acc_percent(15)     TYPE p DECIMALS 3,
        un_acc_percent(15)  TYPE p DECIMALS 3,
        yeild(15)           TYPE p DECIMALS 3,
        sample(15)          TYPE p DECIMALS 3,
        time_hold(15)       TYPE p DECIMALS 3,
      END OF ty_pie_data,

      BEGIN OF ty_pie_data_copy,
        batch               TYPE mcha-charg,
        material            TYPE mcha-matnr,
        order_number        TYPE afru-aufnr,
        phase               TYPE afru-vornr,
        yield               TYPE cocf_conf_qty-quant,
        accountable_loss    TYPE cocf_conf_qty-quant,
        un_accountable_loss TYPE cocf_conf_qty-quant,
        quality_sample      TYPE cocf_conf_qty-quant,
        hold_time_study     TYPE cocf_conf_qty-quant,
      END OF ty_pie_data_copy,

      BEGIN OF ty_actual_yeild,
        batch        TYPE mcha-charg,
        material     TYPE mcha-matnr,
        order_number TYPE afru-aufnr,
        actual_yield TYPE cocf_conf_qty-quant,

      END OF ty_actual_yeild.

    DATA:
      mt_mcha           TYPE TABLE OF ty_mcha,
      mt_mara           TYPE TABLE OF ty_mara,
      mt_afpo           TYPE TABLE OF ty_afpo,
      mt_caufv_jest     TYPE TABLE OF ty_caufv_jest,
      mt_resb_mara      TYPE TABLE OF ty_resb_mara,
      mt_mcha_mara_afpo TYPE TABLE OF ty_mcha_mara_afpo,
      mt_internal_table TYPE TABLE OF ty_internal_table,
      mt_bulk_data      TYPE TABLE OF ty_bulk_data,
      mt_bulk_data_copy TYPE TABLE OF ty_bulk_data_copy,
      mt_caufv          TYPE TABLE OF  ty_caufv,
      gt_final_table    TYPE TABLE OF ty_final_table,
      mt_final_copy     TYPE TABLE OF ty_final_table,
      mt_final          TYPE TABLE OF ty_final_table,
      mt_disc           TYPE TABLE OF ty_disc,
      mt_disc_copy      TYPE TABLE OF ty_disc_copy,
      mt_qals           TYPE TABLE OF ty_qals,
      mt_qals_copy      TYPE TABLE OF ty_qals,
      mt_pie_data       TYPE TABLE OF ty_final_table,
      mt_data           TYPE TABLE OF ty_pie_data,
      mt_pie_data_copy  TYPE TABLE OF ty_pie_data_copy,
      mt_actual_yeild   TYPE TABLE OF ty_actual_yeild.
    METHODS:
      validate_scrfields,
      build_fieldcat,
      fetch_data,
      execute,
      show_grid,
      pai_200,
      get_data,
      pie_data,
      pie_chart,
      event_click  FOR EVENT hotspot_click OF cl_gui_alv_grid
        IMPORTING e_row_id e_column_id,
      mat_qant_output IMPORTING VALUE(i_matnr)  TYPE  mara-matnr
                                VALUE(i_in_me)  TYPE  mara-meins
                                VALUE(i_out_me) TYPE  mara-meins
                                VALUE(i_menge)  TYPE ekpo-menge
                      RETURNING VALUE(e_menge)  TYPE  ekpo-menge.

ENDCLASS.

CLASS lcl_life_cycle IMPLEMENTATION.

  METHOD mat_qant_output.

*& Unit of Measure Internal to External Format.
*    CALL FUNCTION 'MD_CONVERT_MATERIAL_UNIT'.

    CALL FUNCTION 'MD_CONVERT_MATERIAL_UNIT'
      EXPORTING
        i_matnr              = i_matnr
        i_in_me              = i_in_me
        i_out_me             = i_out_me
        i_menge              = i_menge
      IMPORTING
        e_menge              = e_menge
      EXCEPTIONS
        error_in_application = 1
        error                = 2
        OTHERS               = 3.
    IF sy-subrc <> 0.
* Implement suitable error handling here
    ENDIF.



  ENDMETHOD.

  METHOD  validate_scrfields.
*Validation for checking the plant.
    IF so_werks[] IS NOT INITIAL.
      DATA:lk_error TYPE string.
      SELECT
       werks
        FROM t001w
     INTO TABLE @DATA(lt_t001w) WHERE werks IN @so_werks.

      LOOP AT so_werks INTO DATA(wa_so_werks).

        READ TABLE lt_t001w WITH KEY werks = wa_so_werks-low  TRANSPORTING  NO FIELDS.
        IF sy-subrc <> 0.
          lk_error = |Invalid plant { wa_so_werks-low  } enter correct plant|.
          MESSAGE lk_error TYPE 'E'.
        ENDIF.
      ENDLOOP.
    ENDIF.

*Validations for checking the Batch_number.
    IF so_charg[] IS NOT INITIAL.
      DATA:lm_error TYPE string.
      SELECT
       charg
        FROM mcha
     INTO TABLE @DATA(lt_mcha) WHERE charg IN @so_charg.

      LOOP AT so_charg INTO DATA(wa_so_charg).

        READ TABLE lt_mcha WITH KEY charg = wa_so_charg-low  TRANSPORTING  NO FIELDS.
        IF sy-subrc <> 0.
          lm_error = |Invalid Batch { wa_so_charg-low  } enter correct Batch|.
          MESSAGE lm_error TYPE 'E'.
        ENDIF.
      ENDLOOP.
    ENDIF.


    IF so_werks[] IS INITIAL AND so_charg[] IS INITIAL.
      MESSAGE i799(f9) WITH TEXT-003.
    ENDIF.

    SELECT
         matnr,
         werks,
         charg
         FROM mcha
         INTO TABLE @mt_mcha
         WHERE werks IN @so_werks AND
               charg IN @so_charg AND
               matnr IN @so_matnr.

    IF sy-subrc <> 0.
      "No records found for the Selection criteria
      MESSAGE i799(f9) WITH TEXT-002.
    ENDIF.
    SORT mt_mcha BY charg.
  ENDMETHOD.

*--->field catlog for the output report table.
  METHOD build_fieldcat.
    FIELD-SYMBOLS:
    <fs_fcat> TYPE lvc_s_fcat.

    APPEND INITIAL LINE TO gt_fieldcat ASSIGNING <fs_fcat>.
    <fs_fcat>-fieldname = 'ORDER_NUMBER'.
    <fs_fcat>-scrtext_l = 'order'.
    <fs_fcat>-outputlen = '12'.
    <fs_fcat>-no_out = 'X'.

    APPEND INITIAL LINE TO gt_fieldcat ASSIGNING <fs_fcat>.
    <fs_fcat>-fieldname = 'BATCH'.
    <fs_fcat>-scrtext_l = 'Batch'.
    <fs_fcat>-outputlen = '13'.
    <fs_fcat>-hotspot   = 'X'.
    APPEND INITIAL LINE TO gt_fieldcat ASSIGNING <fs_fcat>.
    <fs_fcat>-fieldname = 'MATERIAL'.
    <fs_fcat>-scrtext_l = 'Material'.
    <fs_fcat>-outputlen = '12'.
    APPEND INITIAL LINE TO gt_fieldcat ASSIGNING <fs_fcat>.
    <fs_fcat>-fieldname = 'PHASE'.
    <fs_fcat>-scrtext_l = 'Phase'.
    <fs_fcat>-outputlen = '06'.
    APPEND INITIAL LINE TO gt_fieldcat ASSIGNING <fs_fcat>.
    <fs_fcat>-fieldname = 'OPERATION_DESCRIPTION'.
    <fs_fcat>-scrtext_l = 'Operation description'.
    <fs_fcat>-outputlen = '18'.

    APPEND INITIAL LINE TO gt_fieldcat ASSIGNING <fs_fcat>.
    <fs_fcat>-fieldname = 'YIELD'.
    <fs_fcat>-scrtext_s = 'Yield'.
    <fs_fcat>-outputlen = '15'.
    APPEND INITIAL LINE TO gt_fieldcat ASSIGNING <fs_fcat>.
    <fs_fcat>-fieldname = 'Y_UOM'.
    <fs_fcat>-scrtext_m = 'UOM'.
    <fs_fcat>-outputlen = '4'.

    APPEND INITIAL LINE TO gt_fieldcat ASSIGNING <fs_fcat>.
    <fs_fcat>-fieldname = 'ACCOUNTABLE_LOSS'.
    <fs_fcat>-scrtext_m = 'Accountable loss'.
    <fs_fcat>-outputlen = '15'.
    APPEND INITIAL LINE TO gt_fieldcat ASSIGNING <fs_fcat>.
    <fs_fcat>-fieldname = 'A_UOM'.
    <fs_fcat>-scrtext_s = 'UOM'.
    <fs_fcat>-outputlen = '4'.

    APPEND INITIAL LINE TO gt_fieldcat ASSIGNING <fs_fcat>.
    <fs_fcat>-fieldname = 'UN_ACCOUNTABLE_LOSS'.
    <fs_fcat>-scrtext_m = 'Un Accountable loss'.
    <fs_fcat>-outputlen = '15'.

    APPEND INITIAL LINE TO gt_fieldcat ASSIGNING <fs_fcat>.
    <fs_fcat>-fieldname = 'U_UOM'.
    <fs_fcat>-scrtext_m = 'UOM'.
    <fs_fcat>-outputlen = '4'.

    APPEND INITIAL LINE TO gt_fieldcat ASSIGNING <fs_fcat>.
    <fs_fcat>-fieldname = 'QUALITY_SAMPLE'.
    <fs_fcat>-scrtext_m = 'Quality Sample'.
    <fs_fcat>-outputlen = '15'.
    APPEND INITIAL LINE TO gt_fieldcat ASSIGNING <fs_fcat>.
    <fs_fcat>-fieldname = 'Q_UOM'.
    <fs_fcat>-scrtext_s = 'UOM'.
    <fs_fcat>-outputlen = '4'.
    APPEND INITIAL LINE TO gt_fieldcat ASSIGNING <fs_fcat>.
    <fs_fcat>-fieldname = 'HOLD_TIME_STUDY'.
    <fs_fcat>-scrtext_l = 'Hold time study'.
    <fs_fcat>-outputlen = '20'.
    APPEND INITIAL LINE TO gt_fieldcat ASSIGNING <fs_fcat>.
    <fs_fcat>-fieldname = 'H_UOM'.
    <fs_fcat>-scrtext_s = 'UOM'.
    <fs_fcat>-outputlen = '7'.
    APPEND INITIAL LINE TO gt_fieldcat ASSIGNING <fs_fcat>.
    <fs_fcat>-fieldname = 'NET_YIELD'.
    <fs_fcat>-scrtext_s = 'Net yield'.
    <fs_fcat>-outputlen = '15'.
    APPEND INITIAL LINE TO gt_fieldcat ASSIGNING <fs_fcat>.
    <fs_fcat>-fieldname = 'N_UOM'.
    <fs_fcat>-scrtext_l = 'UOM'.
    <fs_fcat>-outputlen = '4'.

  ENDMETHOD.

  METHOD event_click.

    READ TABLE gt_final_table INDEX e_row_id INTO DATA(ls_table).
    READ TABLE mt_data INTO DATA(ll_table) WITH KEY batch = ls_table-batch .

    IF sy-subrc = 0.
      CLEAR gf_yield.
      CLEAR gf_scrap.


      gf_yield = ll_table-yeild_percent.
      gf_scrap = ll_table-scrap_percent.
*      acc_loss = ll_table-acc_percent.
*      un_acc_loss = ll_table-un_acc_percent.
*      yield = ll_table-yeild.
*      sample = ll_table-sample.
*      time_hold = ll_table-time_hold.


*

    CLEAR gs_screen.
    gs_screen-p1 = ll_table-yeild.
    gs_screen-p2 = ll_table-sample.
    gs_screen-p3 = ll_table-time_hold.
    gs_screen-p4 = ll_table-acc_percent.
    gs_screen-p5 = ll_table-un_acc_percent.

    CONDENSE gs_screen-p1.
     CONDENSE gs_screen-p2.
      CONDENSE gs_screen-p3.
       CONDENSE gs_screen-p4.
        CONDENSE gs_screen-p5.

     CLEAR ls_table.

      ENDIF.

    IF gf_yield IS NOT INITIAL.
      CALL SCREEN 201 STARTING AT 25 04
                      ENDING AT 60 15.
    ENDIF.

    IF gf_yield IS  INITIAL.
      DATA:ls_error TYPE string.
      ls_error = |yeild Percentage is doesnot exist for this Process Order|.
      MESSAGE ls_error TYPE 'I'.
    ENDIF.


  ENDMETHOD.






  METHOD fetch_data.

*-->select query for fetching all kinds of order number (bulk,semi,finished) based on batch and material.
    SELECT
         charg,
         aufnr,
         matnr
         FROM afpo
         INTO TABLE @mt_afpo
         FOR ALL ENTRIES IN @mt_mcha
         WHERE charg = @mt_mcha-charg AND
               matnr = @mt_mcha-matnr.

    IF sy-subrc = 0.
      SORT mt_afpo BY charg.
    ENDIF.

*-->select query for fetching material type for all materials(zbpp,zsf,zfp).
    SELECT
         matnr,
         mtart
         FROM mara
         INTO TABLE @DATA(mt_mara)
         FOR ALL ENTRIES IN @mt_afpo
         WHERE matnr = @mt_afpo-matnr.

    IF sy-subrc = 0.
      SORT mt_mcha BY matnr.
    ENDIF.


* -->Select query for the checking the order cancelation indicator(status).
    SELECT
         a~aufnr,
         a~objnr,
         b~objnr,
         b~stat,
         b~inact
         FROM caufv AS a INNER JOIN jest AS b
         ON a~objnr = b~objnr
         INTO TABLE @mt_caufv_jest
         FOR ALL ENTRIES IN @mt_afpo
         WHERE a~aufnr = @mt_afpo-aufnr.

    SORT mt_caufv_jest BY caufv_aufnr.

    DATA: wa_mcha_mara_afpo TYPE ty_mcha_mara_afpo.

    LOOP AT mt_afpo INTO DATA(wa_afpo).
      wa_mcha_mara_afpo-order_number = wa_afpo-aufnr.
      wa_mcha_mara_afpo-batch_no = wa_afpo-charg.
      wa_mcha_mara_afpo-material = wa_afpo-matnr.


      READ TABLE mt_mara INTO DATA(wa_mara) WITH KEY matnr = wa_afpo-matnr.
      wa_mcha_mara_afpo-material_type = wa_mara-mtart.


      READ TABLE mt_caufv_jest INTO DATA(wa_caufv_jest) WITH KEY caufv_aufnr = wa_afpo-aufnr jest_stat = 'I0076' jest_inact = 'X'.
      wa_mcha_mara_afpo-object_number = wa_caufv_jest-caufv_objnr.
      wa_mcha_mara_afpo-status_code = wa_caufv_jest-jest_stat.
      wa_mcha_mara_afpo-status = wa_caufv_jest-jest_inact.




      APPEND wa_mcha_mara_afpo TO mt_mcha_mara_afpo.

      CLEAR wa_mcha_mara_afpo .
      CLEAR wa_mara.
*      CLEAR wa_mara, wa_afpo, wa_caufv_jest .
      CLEAR wa_afpo.
      CLEAR wa_caufv_jest.



    ENDLOOP.

*-->REMOVING THE INACTIVE ORDERS.
    DELETE  mt_mcha_mara_afpo WHERE status IS NOT INITIAL.


    mt_internal_table = CORRESPONDING #( mt_mcha_mara_afpo ).

    DELETE mt_internal_table WHERE material_type NE 'ZBPP'.
*    SORT mt_internal_table BY batch_no.




    SELECT
        a~aufnr,
        a~matnr,
        a~charg,
        b~matnr,
        b~mtart
        FROM resb AS a INNER JOIN mara AS b
        ON a~matnr = b~matnr
        INTO TABLE @mt_resb_mara
        FOR ALL ENTRIES IN @mt_internal_table
        WHERE a~aufnr = @mt_internal_table-order_number.


    DELETE mt_resb_mara WHERE material_type NE 'ZBPW'.
    DELETE mt_resb_mara WHERE bulk_powder_batch IS INITIAL.

    LOOP AT mt_internal_table ASSIGNING FIELD-SYMBOL(<fs_final>) WHERE material_type = 'ZBPP' AND order_number IS NOT INITIAL.    "
      READ TABLE mt_resb_mara INTO DATA(wa_resb_mara) WITH KEY bulk_order_tablet = <fs_final>-order_number.
      IF sy-subrc = 0.
        <fs_final>-bulk_powder_batch = wa_resb_mara-bulk_powder_batch.
        <fs_final>-powder_material = wa_resb_mara-powder_material.
        <fs_final>-powder_material_type = wa_resb_mara-material_type.
        CLEAR wa_resb_mara.
      ENDIF.
    ENDLOOP.




    SELECT
        charg,
        aufnr,
        matnr
        FROM afpo
        INTO TABLE @mt_afpo
        FOR ALL ENTRIES IN @mt_internal_table
        WHERE charg = @mt_internal_table-bulk_powder_batch  AND
              matnr = @mt_internal_table-powder_material.

    LOOP AT mt_internal_table ASSIGNING FIELD-SYMBOL(<fg_final>) WHERE bulk_powder_batch IS NOT INITIAL AND powder_material IS NOT INITIAL.

      READ TABLE mt_afpo INTO DATA(ww_afpo) WITH KEY  charg = <fg_final>-bulk_powder_batch matnr = <fg_final>-powder_material .
      IF sy-subrc = 0.
        <fg_final>-powder_order_number = ww_afpo-aufnr.
        CLEAR ww_afpo.
      ENDIF.
    ENDLOOP.




    SELECT
        a~aufnr,
        a~stokz,
        a~stzhl,
        a~rueck,
        a~rmzhl,
        a~vornr,
        b~rueck,
        b~rmzhl,
        b~layout,
        b~counter,
        b~quant,
        b~unit,
        c~layout,
        c~counter,
        c~ktext
        FROM afru AS a INNER JOIN cocf_conf_qty AS b
        ON a~rueck = b~rueck AND a~rmzhl = b~rmzhl
        INNER JOIN cocf_cu_q_lint AS c
        ON b~layout = c~layout AND b~counter = c~counter
        INTO TABLE @mt_bulk_data
        FOR ALL ENTRIES IN @mt_internal_table
        WHERE a~aufnr = @mt_internal_table-order_number.


    DELETE mt_bulk_data WHERE reversed IS NOT INITIAL .
    DELETE mt_bulk_data WHERE cancelled IS NOT INITIAL.


*-->select query for Quality sample, hold time study.
    SELECT
         aufnr,
         art,
         lmenge03,
         lmenge08
         FROM qals
         INTO TABLE @mt_qals
         FOR ALL ENTRIES IN @mt_internal_table
         WHERE aufnr = @mt_internal_table-order_number AND art = '04'.






*-->select query for
    SELECT
        aufnr,
        gamng
        FROM caufv
        INTO TABLE @mt_caufv
        FOR ALL ENTRIES IN @mt_internal_table
        WHERE aufnr = @mt_internal_table-order_number.


    SELECT
        a~matnr,
        a~werks,
        a~plnty,
        a~plnnr,
        a~plnal,
        b~plnty,
        b~plnnr,
        b~plnal,
        b~loekz,
        b~plnkn,
        c~plnkn,
        c~plnnr,
        c~vornr,
        c~plnty,
        c~ltxa1
        FROM mapl AS a INNER JOIN plas AS b
        ON a~plnnr = b~plnnr AND a~plnal = b~plnal
        INNER JOIN plpo AS c
        ON b~plnnr = c~plnnr AND b~plnkn = c~plnkn
        INTO TABLE @mt_disc
        FOR ALL ENTRIES IN @mt_internal_table
        WHERE a~matnr = @mt_internal_table-material  AND
*       a~werks = @mt_internal_table-material and
       a~plnty = '2' AND
       b~plnty = '2' AND
       c~plnty = '2' .


    DELETE mt_disc WHERE del_ind IS NOT INITIAL.


  ENDMETHOD.


  METHOD execute.
*-->fetching data .
    "To get Data
    fetch_data( ).
    get_data( ).
*    pie_data( ).

    CALL SCREEN 200.

  ENDMETHOD.


  METHOD show_grid.
    DATA:
        ls_layo TYPE lvc_s_layo.
    ls_layo-zebra = 'X'.
* Step1
*Create a ref for  CL_GUI_CUSTOM_CONTAINER
    CREATE OBJECT go_obj_ccont
      EXPORTING
        container_name = 'ALVREPORT'.
*Step 2.
* Create a ref for CL_GUI_ALV_GRID.
    CREATE OBJECT go_alv
      EXPORTING
        i_parent = go_obj_ccont.
    SET HANDLER go_life_cycle->event_click FOR go_alv.

    CALL METHOD go_alv->set_table_for_first_display
      EXPORTING
        i_structure_name = 'TY_FINAL_TABLE'
        is_layout        = ls_layo
      CHANGING
        it_outtab        = gt_final_table
        it_fieldcatalog  = gt_fieldcat.

  ENDMETHOD.

  METHOD pai_200.
    CASE sy-ucomm.
      WHEN 'BACK'.
        CLEAR sy-ucomm.
        LEAVE TO SCREEN 0.
      WHEN '%EX'.
        CLEAR sy-ucomm.
        LEAVE TO SCREEN 0.
      WHEN 'RW'.
        CLEAR sy-ucomm.
        LEAVE TO SCREEN 0.
        LEAVE SCREEN.
    ENDCASE.
  ENDMETHOD.

  METHOD get_data.
    DATA: wa_final_table TYPE ty_final_table.
    DATA : lv_index TYPE sy-tabix.




    LOOP AT mt_internal_table INTO DATA(wa_internal_table).

      SORT : mt_bulk_data BY order_number activity.
      SORT: mt_qals BY order_number.
      SORT : mt_disc BY material activity.

      mt_disc_copy = CORRESPONDING #( mt_disc ).

      mt_qals_copy = CORRESPONDING #( mt_qals ).
      DELETE  mt_qals_copy   WHERE order_number NE wa_internal_table-order_number.
      DELETE mt_disc_copy WHERE material NE wa_internal_table-material.
      mt_bulk_data_copy = CORRESPONDING #( mt_bulk_data ).
      DELETE mt_bulk_data_copy WHERE order_number NE wa_internal_table-order_number.
      DELETE mt_bulk_data_copy WHERE qty_conf IS INITIAL.

      IF mt_bulk_data_copy IS NOT INITIAL.
        LOOP AT mt_bulk_data_copy INTO DATA(wa_bulk_data_copy).

          wa_final_table-order_number = wa_internal_table-order_number.
          wa_final_table-batch = wa_internal_table-batch_no.
          wa_final_table-material = wa_internal_table-material.

          wa_final_table-phase = wa_bulk_data_copy-activity.
          wa_final_table-n_uom = wa_bulk_data_copy-confirmation_unit.
          wa_final_table-q_uom = wa_bulk_data_copy-confirmation_unit.
          wa_final_table-h_uom = wa_bulk_data_copy-confirmation_unit.

          READ TABLE mt_disc_copy INTO DATA(wa_disc_copy) WITH KEY activity = wa_final_table-phase.
          IF sy-subrc = 0.
            wa_final_table-operation_description  = wa_disc_copy-dis.
            CLEAR wa_disc_copy.
          ENDIF.

          IF wa_bulk_data_copy-out_sequence = '01'.
            wa_final_table-yield = wa_bulk_data_copy-qty_conf.
            wa_final_table-y_uom = wa_bulk_data_copy-confirmation_unit.
          ENDIF.
          IF wa_bulk_data_copy-out_sequence = '02'.
            wa_final_table-accountable_loss = wa_bulk_data_copy-qty_conf.
            wa_final_table-a_uom = wa_bulk_data_copy-confirmation_unit.
          ENDIF.

          IF wa_bulk_data_copy-out_sequence = '03'.
            wa_final_table-un_accountable_loss = wa_bulk_data_copy-qty_conf.
            wa_final_table-u_uom = wa_bulk_data_copy-confirmation_unit.
          ENDIF.

          IF wa_bulk_data_copy-out_sequence ='04'.
            wa_final_table-quality_sample = wa_bulk_data_copy-qty_conf.
            wa_final_table-q_uom = wa_bulk_data_copy-confirmation_unit.
          ENDIF.
          IF wa_bulk_data_copy-out_sequence ='05'.
            wa_final_table-hold_time_study = wa_bulk_data_copy-qty_conf.
            wa_final_table-h_uom = wa_bulk_data_copy-confirmation_unit.
          ENDIF.

          AT END OF activity.

            APPEND wa_final_table TO gt_final_table.
*          CLEAR : wa_final_table ,wa_internal_table.


          ENDAT.


        ENDLOOP.

      ENDIF.
      IF wa_final_table IS NOT INITIAL.
        AT END OF order_number.
          DATA : v_count TYPE i.

          DESCRIBE TABLE gt_final_table LINES v_count .
          DATA:wa_actual_yeild TYPE ty_actual_yeild.

          READ TABLE gt_final_table ASSIGNING FIELD-SYMBOL(<fj_finalt>) INDEX v_count.


          wa_actual_yeild-batch = <fj_finalt>-batch .
          wa_actual_yeild-material  = <fj_finalt>-material.
          wa_actual_yeild-order_number = <fj_finalt>-order_number.
          wa_actual_yeild-actual_yield = <fj_finalt>-yield.
          APPEND wa_actual_yeild TO mt_actual_yeild.

          IF sy-subrc = 0.

            READ TABLE mt_qals_copy INTO DATA(wa_qals_copy) WITH KEY order_number = wa_internal_table-order_number.
            <fj_finalt>-quality_sample = wa_qals_copy-quality_sample.
            <fj_finalt>-hold_time_study = wa_qals_copy-hold_time_study.
            CLEAR wa_qals_copy.
          ENDIF.



        ENDAT.
      ENDIF.
    ENDLOOP.
*       endif.

    LOOP AT gt_final_table ASSIGNING FIELD-SYMBOL(<fj_final>)
        WHERE  phase IS NOT INITIAL.
      IF sy-subrc = 0.
        <fj_final>-net_yield =  ( <fj_final>-yield - <fj_final>-quality_sample - <fj_final>-hold_time_study ).

      ENDIF.

    ENDLOOP.
    DATA:wa_pie_data TYPE ty_final_table.
    DATA:wa_final TYPE ty_final_table.
    mt_final_copy = CORRESPONDING #( gt_final_table ).
    SORT : mt_final_copy BY material phase.
    LOOP AT mt_final_copy INTO DATA(wa_final_copy).
      wa_final-order_number = wa_final_copy-order_number.
      wa_final-batch = wa_final_copy-batch.
      wa_final-material = wa_final_copy-material.
      wa_final-phase = wa_final_copy-phase.
      wa_final-operation_description = wa_final_copy-operation_description.
      wa_final-yield = wa_final_copy-yield.
      wa_final-y_uom = wa_final_copy-y_uom.
      wa_final-accountable_loss = wa_final_copy-accountable_loss.
      wa_final-a_uom = wa_final_copy-a_uom.
      wa_final-un_accountable_loss = wa_final_copy-un_accountable_loss.
      wa_final-u_uom = wa_final_copy-u_uom.
      wa_final-quality_sample = wa_final_copy-quality_sample.
      wa_final-q_uom = wa_final_copy-q_uom.
      wa_final-hold_time_study = wa_final_copy-hold_time_study.
      wa_final-h_uom = wa_final_copy-h_uom.

      wa_pie_data-order_number = wa_final_copy-order_number.
      wa_pie_data-batch = wa_final_copy-batch.
      wa_pie_data-material = wa_final_copy-material.
      wa_pie_data-phase = wa_final_copy-phase.


      AT NEW phase.


        wa_pie_data-yield = mat_qant_output(  i_matnr = wa_final-material i_in_me = wa_final-a_uom i_out_me = 'TAB'  i_menge = wa_final-yield   ).
        wa_pie_data-accountable_loss = mat_qant_output(  i_matnr = wa_final-material i_in_me = wa_final-a_uom i_out_me = 'TAB'  i_menge = wa_final-accountable_loss   ).
        wa_pie_data-un_accountable_loss = mat_qant_output(  i_matnr = wa_final-material i_in_me = wa_final-a_uom i_out_me = 'TAB'  i_menge = wa_final-un_accountable_loss   ).
        wa_pie_data-quality_sample = mat_qant_output(  i_matnr = wa_final-material i_in_me = wa_final-a_uom i_out_me = 'TAB'  i_menge = wa_final-quality_sample   ).
        wa_pie_data-hold_time_study = mat_qant_output(  i_matnr = wa_final-material i_in_me = wa_final-a_uom i_out_me = 'TAB'  i_menge = wa_final-hold_time_study   ).

        APPEND wa_pie_data TO mt_pie_data.
        CLEAR : wa_pie_data ,wa_final,wa_final_copy .


      ENDAT.
    ENDLOOP.


    DATA:wa_data TYPE ty_pie_data.
    LOOP AT mt_pie_data INTO DATA(ws_pie_data).

      AT NEW batch.
        wa_data-order_number = ws_pie_data-order_number .
        wa_data-batch = ws_pie_data-batch.
        wa_data-material = ws_pie_data-material.
      ENDAT.

      AT END OF batch.
        SUM.
        wa_data-accountable_loss = ws_pie_data-accountable_loss.
        wa_data-un_accountable_loss = ws_pie_data-un_accountable_loss.
        wa_data-quality_sample  = ws_pie_data-quality_sample .
        wa_data-hold_time_study = ws_pie_data-hold_time_study.

        APPEND wa_data TO mt_data.
        CLEAR : wa_data.
      ENDAT.

    ENDLOOP.

    LOOP AT mt_data ASSIGNING FIELD-SYMBOL(<ff_final>).
      READ TABLE mt_caufv INTO DATA(wa_caufv) WITH KEY order_no = <ff_final>-order_number.
      IF sy-subrc = 0.
        <ff_final>-planned_yeild  = wa_caufv-planned_yeild.
        CLEAR wa_caufv.
      ENDIF.
      READ TABLE mt_actual_yeild INTO DATA(ws_actual_yeild) WITH KEY order_number = <ff_final>-order_number.
      IF sy-subrc = 0.
        <ff_final>-yield  = ws_actual_yeild-actual_yield.
        CLEAR ws_actual_yeild.
      ENDIF.
      <ff_final>-total_loss    = <ff_final>-accountable_loss + <ff_final>-un_accountable_loss.
      <ff_final>-yeild_percent = ( <ff_final>-yield + <ff_final>-quality_sample + <ff_final>-hold_time_study ) / ( <ff_final>-planned_yeild ) * 100.
      <ff_final>-scrap_percent  = ( <ff_final>-total_loss / <ff_final>-planned_yeild ) * 100.
      <ff_final>-acc_percent    = ( <ff_final>-accountable_loss / <ff_final>-planned_yeild ) * 100.
      <ff_final>-un_acc_percent    = ( <ff_final>-un_accountable_loss / <ff_final>-planned_yeild ) * 100.
      <ff_final>-yeild    = ( <ff_final>-yield / <ff_final>-planned_yeild ) * 100.
      <ff_final>-sample    = ( <ff_final>-quality_sample / <ff_final>-planned_yeild ) * 100.
      <ff_final>-time_hold    = ( <ff_final>-hold_time_study / <ff_final>-planned_yeild ) * 100.


    ENDLOOP.


  ENDMETHOD.

  METHOD pie_data.





  ENDMETHOD.
  METHOD pie_chart.
    REFRESH y_values.
    REFRESH x_texts.



    x_texts-coltxt = |yield- { gf_yield }%|.
    APPEND x_texts TO x_texts.
    x_texts-coltxt = |scrap- { gf_scrap }%|.
    APPEND x_texts TO x_texts.

    y_values-val1 = gf_yield.
    y_values-val2 = gf_scrap.
    APPEND y_values TO y_values.

    CALL FUNCTION 'ZGFW_PRES_SHOW'
      EXPORTING
        container         = 'PIE_CHART'
*       TOP               =
*       LEFT              =
        height            = 24
        width             = 12
        presentation_type = gfw_prestype_pie_chart
*        header            = 'ANALYSIS OF YEILD & SCRAP'
*       ORIENTATION       = 1
*       PARENT            =
*       X_AXIS_TITLE      = 'yield:yeild-sample-timehold'
*       Y_AXIS_TITLE      =
*       FORMAT            =
* IMPORTING
*       RETVAL            =
*       CONTENT_TYPE      =
*       CONTENT_LENGTH    =
      TABLES
        values            = y_values
        column_texts      = x_texts
*       ROW_LABELS        =
*       COLUMN_LABELS     =
*       CONTENT           =
      EXCEPTIONS
        error_occurred    = 1
        OTHERS            = 2.
    IF sy-subrc <> 0.
* Implement suitable error handling here
    ENDIF.

  ENDMETHOD.


ENDCLASS.
*&---------------------------------------------------------------------*
*& Module STATUS_0200 OUTPUT
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
MODULE status_0200 OUTPUT.
* SET PF-STATUS 'xxxxxxxx'.

  SET TITLEBAR 'ZTITLES'.
  go_life_cycle->build_fieldcat( ).
  go_life_cycle->show_grid( ).



ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0200  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0200 INPUT.

  go_life_cycle->pai_200( ).


ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0201  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0201 INPUT.
  CASE sy-ucomm.
    WHEN 'ENTER' OR 'CANCEL' .
      LEAVE TO SCREEN 0.
  ENDCASE.

ENDMODULE.
*&---------------------------------------------------------------------*
*& Module STATUS_0201 OUTPUT
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
MODULE status_0201 OUTPUT.
* SET PF-STATUS 'xxxxxxxx'.
* SET TITLEBAR 'xxx'.

  SET PF-STATUS 'STAT'.
* SET TITLEBAR 'xxx'.
  go_life_cycle->pie_chart( ).
ENDMODULE.
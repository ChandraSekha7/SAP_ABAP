-------------------------------------------------------**&---------------------------------------------------------------------*
*& Include ZQM_PRODUCT_LIFE_CYCLE_I01
*&---------------------------------------------------------------------*


CLASS lcl_life_cycle DEFINITION DEFERRED.

DATA:

*  gv_okcode     TYPE syst_ucomm,
  gt_fieldcat   TYPE lvc_t_fcat,
  gt_sort       TYPE lvc_t_sort,
  go_obj_ccont  TYPE REF TO cl_gui_custom_container,
  go_alv        TYPE REF TO cl_gui_alv_grid,
  go_pi_cont    TYPE REF TO cl_gui_custom_container,
  go_pi_chart   TYPE REF TO cl_gui_alv_grid,
  go_life_cycle TYPE REF TO lcl_life_cycle.



DATA:gv_matnr TYPE mcha-matnr,
     gv_werks TYPE mcha-werks,
     gv_charg TYPE mcha-charg.

*--> Selection Screen
SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE TEXT-001.


  SELECT-OPTIONS:
     so_matnr FOR gv_matnr,
     so_werks FOR gv_werks NO INTERVALS OBLIGATORY,
     so_charg FOR gv_charg OBLIGATORY.

SELECTION-SCREEN END OF BLOCK b1.

CLASS lcl_life_cycle DEFINITION.

  PUBLIC SECTION.
    TYPES:
      BEGIN OF ty_mcha,
        matnr TYPE mcha-matnr,
        werks TYPE mcha-werks,
        charg TYPE mcha-charg,
      END OF ty_mcha,

      BEGIN OF ty_mara,
        matnr TYPE mara-matnr,
        mtart TYPE mara-mtart,
      END OF ty_mara,

      BEGIN OF ty_afpo,
        charg TYPE afpo-charg,
        aufnr TYPE afpo-aufnr,
        matnr TYPE afpo-matnr,
      END OF ty_afpo,

      BEGIN OF ty_caufv_jest,
        caufv_aufnr TYPE caufv-aufnr,
        caufv_objnr TYPE caufv-objnr,
        jest_objnr  TYPE jest-objnr,
        jest_stat   TYPE jest-stat,
        jest_inact  TYPE jest-inact,
      END OF ty_caufv_jest,

      BEGIN OF ty_mcha_mara_afpo,
        plant                  TYPE mcha-werks,
        Batch_no               TYPE mcha-charg,
        Material               TYPE mcha-matnr,
        Material_type          TYPE mara-mtart,
        Order_number           TYPE afpo-aufnr,
        Object_number          TYPE caufv-objnr,
        status_code            TYPE jest-stat,
        status                 TYPE jest-inact,
        Packaging_started_on   TYPE afvv-isavd,
        Packaging_Completed_on TYPE  afvv-ieavd,

      END OF ty_mcha_mara_afpo,


      BEGIN OF ty_internal_table,
        plant             TYPE mcha-werks,
        Batch_no          TYPE mcha-charg,
        Material          TYPE mcha-matnr,
        Material_type     TYPE mara-mtart,
        Order_number      TYPE afpo-aufnr,
        bulk_powder_batch TYPE resb-charg,
        powder_material   TYPE resb-matnr,
        manufacture_date  TYPE mch1-hsdat,
        expiry_date       TYPE mch1-vfdat,
        Mfg_start_date    TYPE afvv-isad,
        Mfg_end_date      TYPE afvv-ieavd,

      END OF ty_internal_table,

      BEGIN OF ty_mch1,
        matnr TYPE mch1-matnr,
        charg TYPE mch1-charg,
        hsdat TYPE mch1-hsdat,
        vfdat TYPE mch1-vfdat,
      END OF ty_mch1,

      BEGIN OF ty_resb_mara,
        bulk_order_tablet TYPE resb-aufnr,
        powder_material   TYPE resb-matnr,
        bulk_powder_batch TYPE resb-charg,
        mara_material     TYPE mara-matnr,
        material_type     TYPE mara-mtart,
        mfg_sheduled_on type caufv-gstrp,
      END OF ty_resb_mara,

      BEGIN OF ty_caufv,
        order_no             TYPE caufv-aufnr,
*        Material_no TYPE caufv-matnr,
        Material_description TYPE caufv-ktext,
        Order_Qty            TYPE caufv-gamng,
        uom                  TYPE caufv-gmein,
        Yield                TYPE caufv-igmng,
        Scarp                TYPE caufv-iasmg,
      END OF ty_caufv,

      BEGIN OF ty_afko_afvc_afvv,
        Order_number        TYPE afko-aufnr,
        in_Plant_operation  TYPE afko-aufpl,
        out_Plant_operation TYPE afvc-aufpl,
        Activity            TYPE afvc-vornr,
        in_Counter          TYPE afvc-aplzl,
        Plant_operation     TYPE afvv-aufpl,
        out_counter         TYPE afvv-aplzl,
        Start_date          TYPE afvv-isavd,
        End_date            TYPE afvv-ieavd,
      END OF ty_afko_afvc_afvv,

      BEGIN OF ty_afpo_afko_afvc_afvv,
        bulk_powder_material TYPE afpo-matnr,
        batch_no             TYPE afpo-charg,
        in_Order_number      TYPE afpo-aufnr,
        out_Order_number     TYPE afko-aufnr,
        in_Plant_operation   TYPE afko-aufpl,
        out_Plant_operation  TYPE afvc-aufpl,
        in_Counter           TYPE afvc-aplzl,
        Plant_operation      TYPE afvv-aufpl,
        out_counter          TYPE afvv-aplzl,
        Start_date           TYPE afvv-isavd,
*        End_date            TYPE afvv-ieavd,
      END OF ty_afpo_afko_afvc_afvv,



      BEGIN OF ty_final_table,
        finished_product_code   TYPE aufnr,
        Product_name            TYPE  Caufv-ktext,
        Batch_no                TYPE mcha-charg,
        process_Order           TYPE  afpo-aufnr,
        Plant                   TYPE mcha-werks,
        Order_Qty               TYPE caufv-gamng,
        Order_UOM               TYPE caufv-gmein,
        Yield_Qty               TYPE caufv-igmng,
        Yield_UOM               TYPE caufv-gmein,
        Sample_Qty              type Caufv-igmng,
        Sample_UOM               TYPE caufv-gmein,
        Scrap_Qty               TYPE caufv-iasmg,
        Scrap_UOM               TYPE caufv-gmein,
        Packaging_accountability type aufnr,
        Yield_percentage        TYPE aufnr,
        Scrap_percentage        TYPE aufnr,
        Manufacturing_scheduled_on type caufv-gstrp,
        Manufacturing_Date      TYPE afvv-isavd,
        Expiry_Date             TYPE afvv-ieavd,
        Mfg_Started_on          TYPE afvv-isavd,
        Mfg_Completed_on        TYPE afvv-ieavd,
        Packaging_scheduled_on type caufv-gstrp,
        Packaging_started_on    TYPE afvv-isavd,
        Packaging_Completed_on  TYPE afvv-ieavd,
        Batch_Released_by_QA_on TYPE qave-vdatum,
      END OF ty_final_table,

      BEGIN OF ty_qals_qave,
        process_Order      TYPE qals-aufnr,
        in_Inspection_lot  TYPE qals-prueflos,
        out_Inspection_lot TYPE qave-prueflos,
        State              TYPE qave-kzart,
        Batch_released_on  TYPE qave-vdatum,

      END OF ty_qals_qave.




    DATA:
      mt_mcha                TYPE TABLE OF ty_mcha,
      mt_mara                TYPE TABLE OF ty_mara,
      mt_afpo                TYPE TABLE OF ty_afpo,
      mt_caufv_jest          TYPE TABLE OF ty_caufv_jest,
      mt_mcha_mara_afpo      TYPE TABLE OF ty_mcha_mara_afpo,
      mt_mch1                TYPE TABLE OF ty_mch1,
      mt_resb_mara           TYPE TABLE OF ty_resb_mara,
      mt_caufv               TYPE TABLE OF ty_caufv,
      mt_afko_afvc_afvv      TYPE TABLE OF ty_afko_afvc_afvv,
      kt_afko_afvc_afvv      TYPE TABLE OF ty_afko_afvc_afvv,
      mt_afpo_akpo_afvc_afvv TYPE TABLE OF ty_afpo_afko_afvc_afvv,
      mt_internal_Table      TYPE TABLE OF ty_internal_table,
      gt_final_table         TYPE TABLE OF  ty_final_table,
      mt_qals_qave           TYPE TABLE OF ty_qals_qave.
    METHODS:
      validate_scrfields,
*      delete_cancelled_orders,
*      fetch_bulk_mfg_expiry,
*      fetch_packging_data,
      fetch_data,
      get_data,
      execute,
      build_fieldcat,
      show_grid,
      pi_chart,
      pai_200.

ENDCLASS.

CLASS lcl_life_cycle IMPLEMENTATION.

  METHOD  validate_scrfields.

*Validation for checking the plant.
    IF so_werks[] IS NOT INITIAL.
      DATA:lk_error TYPE string.
      SELECT
       werks
        FROM t001w
     INTO TABLE @DATA(lt_t001w) WHERE werks IN @so_werks.

      LOOP AT so_werks INTO DATA(wa_so_werks).

        READ TABLE lt_t001w WITH KEY werks = wa_so_werks-low  TRANSPORTING  NO FIELDS.
        IF sy-subrc <> 0.
          lk_error = |Invalid plant { wa_so_werks-low  } enter correct plant|.
          MESSAGE lk_error TYPE 'E'.
        ENDIF.
      ENDLOOP.
    ENDIF.

*Validations for checking the Batch_number.
    IF so_charg[] IS NOT INITIAL.
      DATA:lm_error TYPE string.
      SELECT
       charg
        FROM mcha
     INTO TABLE @DATA(lt_mcha) WHERE charg IN @so_charg.

      LOOP AT so_charg INTO DATA(wa_so_charg).

        READ TABLE lt_mcha WITH KEY charg = wa_so_charg-low  TRANSPORTING  NO FIELDS.
        IF sy-subrc <> 0.
          lm_error = |Invalid Batch { wa_so_charg-low  } enter correct Batch|.
          MESSAGE lm_error TYPE 'E'.
        ENDIF.
      ENDLOOP.
    ENDIF.


    IF so_werks[] IS INITIAL AND so_charg[] IS INITIAL.
      MESSAGE i799(f9) WITH TEXT-003.
    ENDIF.

    SELECT
         matnr,
         werks,
         charg
         FROM mcha
         INTO TABLE @mt_mcha
         WHERE werks IN @so_werks AND
               charg IN @so_charg .
*               matnr IN @so_matnr.

    IF sy-subrc <> 0.
      "No records found for the Selection criteria
      MESSAGE i799(f9) WITH TEXT-002.
    ENDIF.


    SORT mt_mcha BY charg.


  ENDMETHOD.





*--->field catlog for the output report table.
  METHOD build_fieldcat.
    FIELD-SYMBOLS:
    <fs_fcat> TYPE lvc_s_fcat.

    APPEND INITIAL LINE TO gt_fieldcat ASSIGNING <fs_fcat>.
    <fs_fcat>-fieldname = 'FINISHED_PRODUCT_CODE'.
    <fs_fcat>-scrtext_l = 'Finished product code'.
    <fs_fcat>-outputlen = '25'.
    APPEND INITIAL LINE TO gt_fieldcat ASSIGNING <fs_fcat>.
    <fs_fcat>-fieldname = 'PRODUCT_NAME'.
    <fs_fcat>-scrtext_l = 'Product name'.
    <fs_fcat>-outputlen = '10'.
    APPEND INITIAL LINE TO gt_fieldcat ASSIGNING <fs_fcat>.
    <fs_fcat>-fieldname = 'BATCH_NO'.
    <fs_fcat>-scrtext_l = 'Batch Number'.
    <fs_fcat>-outputlen = '15'.
    APPEND INITIAL LINE TO gt_fieldcat ASSIGNING <fs_fcat>.
    <fs_fcat>-fieldname = 'PROCESS_ORDER'.
    <fs_fcat>-scrtext_l = 'Process Order'.
    <fs_fcat>-outputlen = '10'.
    APPEND INITIAL LINE TO gt_fieldcat ASSIGNING <fs_fcat>.
    <fs_fcat>-fieldname = 'PLANT'.
    <fs_fcat>-scrtext_s = 'Plant'.
    <fs_fcat>-outputlen = '5'.
    APPEND INITIAL LINE TO gt_fieldcat ASSIGNING <fs_fcat>.
    <fs_fcat>-fieldname = 'ORDER_QTY'.
    <fs_fcat>-scrtext_m = 'Order Qty'.
    <fs_fcat>-outputlen = '10'.
    APPEND INITIAL LINE TO gt_fieldcat ASSIGNING <fs_fcat>.
    <fs_fcat>-fieldname = 'ORDER_UOM'.
    <fs_fcat>-scrtext_l = 'Order UOM'.
    <fs_fcat>-outputlen = '8'.
    APPEND INITIAL LINE TO gt_fieldcat ASSIGNING <fs_fcat>.
    <fs_fcat>-fieldname = 'YIELD_QTY'.
    <fs_fcat>-scrtext_m = 'Yield Qty'.
    <fs_fcat>-outputlen = '10'.
    APPEND INITIAL LINE TO gt_fieldcat ASSIGNING <fs_fcat>.
    <fs_fcat>-fieldname = 'YIELD_UOM'.
    <fs_fcat>-scrtext_m = 'Yield UOM'.
    <fs_fcat>-outputlen = '8'.

    APPEND INITIAL LINE TO gt_fieldcat ASSIGNING <fs_fcat>.
    <fs_fcat>-fieldname = 'SAMPLE_QTY'.
    <fs_fcat>-scrtext_m = 'Sample Qty'.
    <fs_fcat>-outputlen = '10'.
    APPEND INITIAL LINE TO gt_fieldcat ASSIGNING <fs_fcat>.
    <fs_fcat>-fieldname = 'SAMPLE_UOM'.
    <fs_fcat>-scrtext_m = 'Sample UOM'.
    <fs_fcat>-outputlen = '8'.

    APPEND INITIAL LINE TO gt_fieldcat ASSIGNING <fs_fcat>.
    <fs_fcat>-fieldname = 'SCRAP_QTY'.
    <fs_fcat>-scrtext_m = 'Scrap Qty'.
    <fs_fcat>-outputlen = '10'.
    APPEND INITIAL LINE TO gt_fieldcat ASSIGNING <fs_fcat>.
    <fs_fcat>-fieldname = 'SCRAP_UOM'.
    <fs_fcat>-scrtext_l = 'Scrap UOM'.
    <fs_fcat>-outputlen = '10'.

    APPEND INITIAL LINE TO gt_fieldcat ASSIGNING <fs_fcat>.
    <fs_fcat>-fieldname = 'PACKAGING_ACCOUNTABLITY'.
    <fs_fcat>-scrtext_l = 'Packaging_accountability'.
    <fs_fcat>-outputlen = '15'.

    APPEND INITIAL LINE TO gt_fieldcat ASSIGNING <fs_fcat>.
    <fs_fcat>-fieldname = 'YIELD_PERCENTAGE'.
    <fs_fcat>-scrtext_s = '%Yield'.
    <fs_fcat>-outputlen = '7'.
    APPEND INITIAL LINE TO gt_fieldcat ASSIGNING <fs_fcat>.
    <fs_fcat>-fieldname = 'SCRAP_PERCENTAGE'.
    <fs_fcat>-scrtext_s = '%Scrap'.
    <fs_fcat>-outputlen = '7'.
    APPEND INITIAL LINE TO gt_fieldcat ASSIGNING <fs_fcat>.
    <fs_fcat>-fieldname = 'MANUFACTURING_SCHEDULED_ON'.
    <fs_fcat>-scrtext_l = 'Mfg.Scheduled on '.
    <fs_fcat>-outputlen = '10'.


    APPEND INITIAL LINE TO gt_fieldcat ASSIGNING <fs_fcat>.
    <fs_fcat>-fieldname = 'MANUFACTURING_DATE'.
    <fs_fcat>-scrtext_l = 'Mfg.Date'.
    <fs_fcat>-outputlen = '10'.
    APPEND INITIAL LINE TO gt_fieldcat ASSIGNING <fs_fcat>.
    <fs_fcat>-fieldname = 'EXPIRY_DATE'.
    <fs_fcat>-scrtext_m = 'Expiry Date'.
    <fs_fcat>-outputlen = '10'.
    APPEND INITIAL LINE TO gt_fieldcat ASSIGNING <fs_fcat>.
    <fs_fcat>-fieldname = 'MFG_STARTED_ON'.
    <fs_fcat>-scrtext_s = 'Mfg.Started on'.
    <fs_fcat>-outputlen = '10'.
    APPEND INITIAL LINE TO gt_fieldcat ASSIGNING <fs_fcat>.
    <fs_fcat>-fieldname = 'MFG_COMPLETED_ON'.
    <fs_fcat>-scrtext_m = 'Mfg.Completed on'.
    <fs_fcat>-outputlen = '10'.
    APPEND INITIAL LINE TO gt_fieldcat ASSIGNING <fs_fcat>.
    <fs_fcat>-fieldname = 'PACKAGING_SCHEDULED_ON'.
    <fs_fcat>-scrtext_m = 'Pkg.Scheduled on'.
    <fs_fcat>-outputlen = '10'.

    APPEND INITIAL LINE TO gt_fieldcat ASSIGNING <fs_fcat>.
    <fs_fcat>-fieldname = 'PACKAGING_STARTED_ON'.
    <fs_fcat>-scrtext_l = 'Pkg.started on'.
    <fs_fcat>-outputlen = '10'.
    APPEND INITIAL LINE TO gt_fieldcat ASSIGNING <fs_fcat>.
    <fs_fcat>-fieldname = 'PACKAGING_COMPLETED_ON'.
    <fs_fcat>-scrtext_l = 'Pkg.Completed on'.
    <fs_fcat>-outputlen = '10'.
    APPEND INITIAL LINE TO gt_fieldcat ASSIGNING <fs_fcat>.
    <fs_fcat>-fieldname = 'BATCH_RELEASED_BY_QA_ON'.
    <fs_fcat>-scrtext_l = 'Batch Released by QA on'.
    <fs_fcat>-outputlen = '10'.


  ENDMETHOD.


  METHOD fetch_data.

*-->select query for fetching material type for all materials(zbpp,zsf,zfp).
    SELECT
         matnr,
         mtart
         FROM mara
         INTO TABLE @mt_mara
         FOR ALL ENTRIES IN @mt_mcha
      WHERE matnr = @mt_mcha-matnr.


    IF sy-subrc = 0.

      SORT mt_mcha BY matnr.
    ENDIF.

*-->select query for fetching all kinds of order number (bulk,semi,finished) based on batch and material.
    SELECT
         charg,
         aufnr,
         matnr
         FROM afpo
         INTO TABLE @mt_afpo
         FOR ALL ENTRIES IN @mt_mcha
         WHERE charg = @mt_mcha-charg .
*               matnr = @mt_mcha-matnr.

    IF sy-subrc = 0.

      SORT mt_afpo BY charg.

    ENDIF.


* -->Select query for the checking the order cancelation indicator(status).
    SELECT a~aufnr,
           a~objnr,
           b~objnr,
           b~stat,
           b~inact
      FROM caufv AS a INNER JOIN jest AS b
      ON a~objnr = b~objnr
      INTO TABLE @mt_caufv_jest
      FOR ALL ENTRIES IN @mt_afpo
      WHERE a~aufnr = @mt_afpo-aufnr.
*        AND b~stat = 'I0076 '
*        AND b~inact = 'X'.

    SORT mt_caufv_jest BY caufv_aufnr.



    DATA: wa_mcha_mara_afpo TYPE ty_mcha_mara_afpo.

    LOOP AT mt_mcha INTO DATA(wa_mcha).
      wa_mcha_mara_afpo-plant = wa_mcha-werks.
      wa_mcha_mara_afpo-Batch_no = wa_mcha-charg.
      wa_mcha_mara_afpo-Material = wa_mcha-matnr.


      READ TABLE mt_mara INTO DATA(wa_mara) WITH KEY matnr = wa_mcha-matnr.
      wa_mcha_mara_afpo-Material_type = wa_mara-mtart.



      READ TABLE mt_afpo INTO DATA(wa_afpo) WITH KEY charg = wa_mcha-charg matnr = wa_mcha-matnr.
      wa_mcha_mara_afpo-Order_number = wa_afpo-aufnr.

      READ TABLE mt_caufv_jest INTO DATA(wa_caufv_jest) WITH KEY caufv_aufnr = wa_afpo-aufnr jest_stat = 'I0076' jest_inact = 'X'.
      wa_mcha_mara_afpo-Object_number = wa_caufv_jest-caufv_objnr.
      wa_mcha_mara_afpo-status_code = wa_caufv_jest-jest_stat.
      wa_mcha_mara_afpo-status = wa_caufv_jest-jest_inact.




      APPEND wa_mcha_mara_afpo TO mt_mcha_mara_afpo.

      CLEAR wa_mcha_mara_afpo.
      CLEAR wa_mcha.
      CLEAR wa_mara.
      CLEAR wa_afpo.
      CLEAR wa_caufv_jest.



    ENDLOOP.
*-->REMOVING THE INACTIVE ORDERS.
    DELETE  mt_mcha_mara_afpo WHERE status IS NOT INITIAL.


    mt_internal_table = CORRESPONDING #( mt_mcha_mara_afpo ).

    DELETE mt_internal_table WHERE material_type NE 'ZBPP'.
    SORT mt_internal_table BY Batch_no.

*  ENDMETHOD.

*  METHOD fetch_bulk_mfg_expiry.

*-->select query for the checking the BULK_TABLET have BULK_POWDER are not.
    SELECT
        a~aufnr,
        a~matnr,
        a~charg,
        b~matnr,
        b~mtart
        FROM resb AS a INNER JOIN mara AS b
        ON a~matnr = b~matnr
        INTO TABLE @mt_resb_mara
        FOR ALL ENTRIES IN @mt_internal_table
        WHERE a~aufnr = @mt_internal_table-Order_number.

    DELETE mt_resb_mara WHERE material_type NE 'ZBPW'.



    LOOP AT mt_internal_table ASSIGNING FIELD-SYMBOL(<fs_final>) WHERE Material_type = 'ZBPP' AND Order_number IS NOT INITIAL.    "
      READ TABLE mt_resb_mara INTO DATA(wa_resb_mara) WITH KEY bulk_order_tablet = <fs_final>-Order_number.
      <fs_final>-bulk_powder_batch = wa_resb_mara-bulk_powder_batch.

      <fs_final>-powder_material = wa_resb_mara-powder_material.

    ENDLOOP.


    SELECT
        matnr,
        charg,
        hsdat,
        vfdat
        FROM mch1
        INTO TABLE @mt_mch1
        FOR ALL ENTRIES IN @mt_internal_table
        WHERE  matnr = @mt_internal_table-Material AND
              charg = @mt_internal_table-Batch_no OR
              matnr = @mt_internal_table-powder_material AND
              charg = @mt_internal_table-bulk_powder_batch .

    LOOP AT mt_internal_table ASSIGNING FIELD-SYMBOL(<ft_final>) WHERE   bulk_powder_batch IS INITIAL.
      READ TABLE mt_mch1 INTO DATA(wa_mch1) WITH KEY charg = <ft_final>-Batch_no.
      IF sy-subrc = 0.
        <ft_final>-manufacture_date = wa_mch1-hsdat.

        <ft_final>-expiry_date = wa_mch1-vfdat.
        CLEAR wa_mch1.
      ENDIF.
    ENDLOOP.

    LOOP AT mt_internal_table ASSIGNING FIELD-SYMBOL(<fu_final>) WHERE bulk_powder_batch IS  NOT INITIAL.
      READ TABLE mt_mch1 INTO wa_mch1 WITH KEY charg = <fu_final>-bulk_powder_batch.
      IF sy-subrc = 0.
        <fu_final>-manufacture_date = wa_mch1-hsdat.

        <fu_final>-expiry_date = wa_mch1-vfdat.
        CLEAR wa_mch1.
      ENDIF.
    ENDLOOP.

    SORT mt_internal_table BY batch_no.





*select
*     aufnr,
*     gstrp
*    from caufv
*  into table @data(lt_caufv)
*  FOR ALL ENTRIES IN @mt_internal_table
*  where aufnr = @mt_internal_table-










*--> select Query for selecting manufacture start date and end date with bulk tablet and end date of bulk_powder.
    SELECT
        a~aufnr,
        a~aufpl,
        b~aufpl,
        b~vornr,
        b~aplzl,
        c~aufpl,
        c~aplzl,
        c~isavd,
        c~ieavd

        FROM afko AS a INNER JOIN afvc AS b
        ON a~aufpl = b~aufpl
        INNER JOIN afvv AS c
        ON a~aufpl = c~aufpl AND b~aplzl = c~aplzl
        APPENDING TABLE @mt_afko_afvc_afvv
        FOR ALL ENTRIES IN @mt_internal_table
        WHERE a~aufnr = @mt_internal_table-Order_number .

*--> Appending Manufacture start date with respect to the bulk_tablet.
    LOOP AT mt_internal_table ASSIGNING FIELD-SYMBOL(<fv_final>) WHERE  bulk_powder_batch IS INITIAL AND powder_material IS INITIAL AND Order_number IS NOT INITIAL.

      READ TABLE mt_afko_afvc_afvv INTO DATA(wa_afko_afvc_afvv) WITH KEY Order_number = <fv_final>-Order_number  Activity = '0011'." out_counter = '00000002'.
      IF sy-subrc = 0.
        <fv_final>-Mfg_start_date = wa_afko_afvc_afvv-Start_date.
        CLEAR wa_afko_afvc_afvv.
      ENDIF.
*--> Appending Manufacture end date with respect to the bulk_tablet.
      READ TABLE mt_afko_afvc_afvv INTO wa_afko_afvc_afvv WITH KEY Order_number = <fv_final>-Order_number  Activity = '0031' ."out_counter = '00000006''.
      IF sy-subrc = 0.
        <fv_final>-Mfg_end_date = wa_afko_afvc_afvv-End_date.
        CLEAR wa_afko_afvc_afvv.
      ENDIF.


    ENDLOOP.
*--> Appending Manufacture end date with respect to the bulk_powder.
    LOOP AT mt_internal_table ASSIGNING FIELD-SYMBOL(<fw_final>) WHERE bulk_powder_batch IS NOT INITIAL AND powder_material IS NOT INITIAL.

        READ TABLE mt_afko_afvc_afvv INTO wa_afko_afvc_afvv WITH KEY Order_number = <fw_final>-Order_number  Activity = '0021' out_counter = '00000004'.
         IF sy-subrc = 0.
        <fw_final>-Mfg_end_date = wa_afko_afvc_afvv-End_date.
        CLEAR wa_afko_afvc_afvv.
      ENDIF.
    ENDLOOP.


* -->Select Query for selecting manufacture start date with bulk Powder.

    SELECT
         a~matnr,
         a~charg,
         a~aufnr,
         b~aufnr,
         b~aufpl,
         c~aufpl,
         c~aplzl,
         d~aufpl,
         d~aplzl,
         d~isavd
         FROM afpo AS a INNER JOIN afko AS b
         ON a~aufnr = b~aufnr
         INNER JOIN afvc AS c
         ON b~aufpl = c~aufpl
         INNER JOIN afvv AS d
         ON c~aufpl = d~aufpl AND c~aplzl = d~aplzl
         INTO TABLE @mt_afpo_akpo_afvc_afvv
         FOR ALL ENTRIES IN @mt_internal_table

         WHERE a~matnr = @mt_internal_table-powder_material AND
               a~charg = @mt_internal_table-bulk_powder_batch.

    LOOP AT mt_internal_table ASSIGNING FIELD-SYMBOL(<fz_final>) WHERE bulk_powder_batch IS NOT INITIAL AND powder_material IS NOT INITIAL.
      READ TABLE mt_afpo_akpo_afvc_afvv INTO DATA(wa_afpo_akpo_afvc_afvv) WITH KEY batch_no = <fz_final>-bulk_powder_batch bulk_powder_material = <fz_final>-powder_material out_counter = '00000002'.
      IF sy-subrc = 0.
        <fz_final>-Mfg_start_date = wa_afpo_akpo_afvc_afvv-Start_date.
        CLEAR wa_afpo_akpo_afvc_afvv.
      ENDIF.

*      READ TABLE mt_afko_afvc_afvv INTO wa_afko_afvc_afvv WITH KEY batch_no = <fz_final>-bulk_powder_batch bulk_powder_material = <fz_final>-powder_material  Activity = '0021' out_counter = '00000004'.
*         IF sy-subrc = 0.
*        <fv_final>-Mfg_end_date = wa_afko_afvc_afvv-End_date.
*        CLEAR wa_afko_afvc_afvv.
*      ENDIF.


    ENDLOOP.

*  ENDMETHOD.




*  METHOD fetch_packging_data.
*--> select query to select the Packaging end date.
    DELETE mt_mcha_mara_afpo WHERE Material_type EQ 'ZBPP'.
    SORT mt_mcha_mara_afpo BY Batch_no.

    SELECT
          a~aufnr,
          a~aufpl,
          b~aufpl,
          b~vornr,
          b~aplzl,
          c~aufpl,
          c~aplzl,
          c~isavd,
          c~ieavd

          FROM afko AS a INNER JOIN afvc AS b
          ON a~aufpl = b~aufpl
          INNER JOIN afvv AS c
          ON a~aufpl = c~aufpl AND b~aplzl = c~aplzl
          APPENDING TABLE @kt_afko_afvc_afvv
          FOR ALL ENTRIES IN @mt_mcha_mara_afpo
          WHERE a~aufnr = @mt_mcha_mara_afpo-Order_number.

*Packaging_started_on   TYPE afvv-isavd,
*        Packaging_Completed_on TYPE  afvv-ieavd,

*Start_date          TYPE afvv-isavd,
*        End_date            TYPE afvv-ieavd,




*    LOOP AT mt_mcha_mara_afpo INTO DATA(we_mcha_mara_afpo) .
*
*      READ TABLE kt_afko_afvc_afvv INTO DATA(wm_afko_afvc_afvv) WITH KEY Order_number = we_mcha_mara_afpo-Order_number Activity = '0011' out_counter = '00000004'.
*      IF sy-subrc = 0.
*        we_mcha_mara_afpo-Packaging_started_on = wm_afko_afvc_afvv-Start_date .
*        we_mcha_mara_afpo-Packaging_Completed_on = wm_afko_afvc_afvv-End_date.
*
*        APPEND we_mcha_mara_afpo TO mt_mcha_mara_afpo.
*      ENDIF.
*      CLEAR we_mcha_mara_afpo.
*    ENDLOOP.

    LOOP AT mt_mcha_mara_afpo ASSIGNING FIELD-SYMBOL(<fd_final>) WHERE  Order_number IS NOT INITIAL .
      READ TABLE kt_afko_afvc_afvv INTO DATA(ww_afko_afvc_afvv) WITH KEY Order_number = <fd_final>-Order_number  Activity = '0011' out_counter = '00000004'.
      IF sy-subrc = 0.
        <fd_final>-Packaging_started_on = ww_afko_afvc_afvv-Start_date .
        <fd_final>-Packaging_Completed_on = ww_afko_afvc_afvv-End_date .
        CLEAR ww_afko_afvc_afvv.
      ENDIF.

    ENDLOOP.

  ENDMETHOD.
* delete mt_mcha_mara_afpo where Material_type = ['ZSF1','ZSF2','ZSF3'].

* BEGIN OF ty_final_table,
*        finished_product_code   TYPE aufnr,
*        Product_name            TYPE  ktext,
*        Batch_no                TYPE charg,
*        process_Order           TYPE aufnr,
*        Plant                   TYPE werks,
*        Order_Qty               TYPE caufv-gamng,
*        Order_UOM               TYPE caufv-gmein,
*        Yeild_Qty               TYPE caufv-igmng,
*        Yield_UOM               TYPE caufv-gmein,
*        Scrap_Qty               TYPE caufv-iasmg,
*        Scrap_UOM               TYPE caufv-gmein,
*        Yield_percentage        TYPE aufnr,
*        Scrap_percentage        TYPE aufnr,
*        Manufacturing_Date      TYPE isavd,
*        Expiry_Date             TYPE ieavd,
*        Mfg_Started_on          TYPE isavd,
*        Mfg_Completed_on        TYPE ieavd,
*        Packaging_started_on    TYPE isavd,
*        Packaging_Completed_on  TYPE ieavd,
*        Batch_Released_by_QA_on TYPE vdatum,
*      END OF ty_final_table.

*BEGIN OF ty_caufv,
*        order_no             TYPE caufv-aufnr,
**        Material_no TYPE caufv-matnr,
*        Material_description TYPE caufv-ktext,
*        Order_Qty            TYPE caufv-gamng,
*        uom                  TYPE caufv-gmein,
*        Yield                TYPE caufv-igmng,
*        Scarp                TYPE caufv-iasmg,
*      END OF ty_caufv,

  METHOD get_data.
*-->Select Query to select yeild,scrap,order_quantity,description,by passing order_number.
    SELECT
        aufnr,
*        matnr,
        ktext,
        gamng,
        gmein,
        igmng,
        iasmg

        FROM caufv
        INTO TABLE @mt_caufv
      FOR ALL ENTRIES IN @mt_mcha_mara_afpo
      WHERE aufnr =  @mt_mcha_mara_afpo-Order_number .

    DATA: wa_final_table TYPE ty_final_table.

    LOOP AT mt_mcha_mara_afpo INTO DATA(wq_mcha_mara_afpo) WHERE Material_type = 'ZFP1' OR Material_type = 'ZFP2'  OR Material_type = 'ZFP3' AND Order_number IS NOT INITIAL .
      IF sy-subrc = 0.

        wa_final_table-finished_product_code = wq_mcha_mara_afpo-Material.
        wa_final_table-Plant = wq_mcha_mara_afpo-Plant.
        wa_final_table-Batch_no =  wq_mcha_mara_afpo-Batch_no.
        wa_final_table-Packaging_started_on = wq_mcha_mara_afpo-Packaging_started_on.
        wa_final_table-Packaging_Completed_on =  wq_mcha_mara_afpo-Packaging_Completed_on.
        READ TABLE mt_caufv INTO DATA(wa_caufv) WITH KEY order_no = wq_mcha_mara_afpo-Order_number.
        IF sy-subrc = 0.
          wa_final_table-process_Order = wa_caufv-order_no.
          wa_final_table-Product_name =  wa_caufv-Material_description.
          wa_final_table-Order_Qty = wa_caufv-Order_Qty.
          wa_final_table-Order_UOM = wa_caufv-uom.
          wa_final_table-Yield_Qty = wa_caufv-Yield.
          wa_final_table-Yield_UOM  = wa_caufv-uom.
          wa_final_table-Scrap_Qty = wa_caufv-Scarp.
          wa_final_table-Scrap_UOM   = wa_caufv-uom.
        ENDIF.

        READ TABLE mt_internal_table INTO DATA(wr_internal_table) WITH KEY Batch_no = wq_mcha_mara_afpo-Batch_no.
        IF sy-subrc = 0.
          wa_final_table-Manufacturing_Date = wr_internal_table-manufacture_date.
          wa_final_table-Expiry_Date =  wr_internal_table-expiry_date.
          wa_final_table-Mfg_Started_on = wr_internal_table-Mfg_start_date.
          wa_final_table-Mfg_Completed_on = wr_internal_table-Mfg_end_date.

        ENDIF.

        APPEND wa_final_table TO gt_final_table.

        CLEAR wq_mcha_mara_afpo.
        CLEAR wa_caufv.
        CLEAR wa_final_table.
        CLEAR wr_internal_table.
      ENDIF.
    ENDLOOP.





*this will delete all records which are not in selection screen.
    IF so_matnr[] IS NOT INITIAL.

      DELETE gt_final_table WHERE finished_product_code NOT IN  so_matnr[].
    ENDIF.

**    DELETE ADJACENT DUPLICATES FROM gt_final_table COMPARING Batch_no .
    SORT gt_final_table  BY Batch_no ASCENDING.

    SELECT
         a~aufnr,
         a~prueflos,
         b~prueflos,
         b~kzart,
         b~vdatum
         FROM qals AS a INNER JOIN qave AS b
         ON a~prueflos = b~prueflos
         INTO TABLE @mt_qals_qave
         FOR ALL ENTRIES IN @gt_final_table
         WHERE a~aufnr = @gt_final_table-process_Order.

    DELETE mt_qals_qave WHERE state NE 'L'.

    LOOP AT gt_final_table ASSIGNING FIELD-SYMBOL(<ff_final>) WHERE process_Order IS NOT INITIAL .
      READ TABLE mt_qals_qave INTO DATA(wa_qals_qave) WITH KEY process_Order = <ff_final>-process_Order .
      IF sy-subrc = 0.
        <ff_final>-Batch_Released_by_QA_on = wa_qals_qave-Batch_released_on.
*        <ff_final>-Packaging_accountability = sy-datum.
        CLEAR wa_qals_qave.
      ENDIF.

*Packaging_accountability type aufnr,
*        Yield_percentage        TYPE aufnr,
*        Scrap_percentage        TYPE aufnr,

    ENDLOOP.
  ENDMETHOD.



  METHOD execute.

    "To get Data
    fetch_data( ).

*    fetch_packging_data( ).

    get_data( ).

*    fetch_bulk_mfg_expiry( ).

    "Prepare data
*    prepare_data( ).

*    IF mt_header IS INITIAL.
*      "No records found for the Selection criteria
*      MESSAGE s002.
*      RETURN.
*    ENDIF.

    CALL SCREEN 200.

  ENDMETHOD.




  METHOD show_grid.
    DATA:
    Ls_layo TYPE lvc_s_layo.
    Ls_layo-zebra = 'X'.
* Step1
*Create a ref for  CL_GUI_CUSTOM_CONTAINER

    CREATE OBJECT go_obj_ccont
      EXPORTING
        container_name = 'CSR'.


*Step 2.
* Create a ref for CL_GUI_ALV_GRID.

    CREATE OBJECT go_alv
      EXPORTING
        i_parent = go_obj_ccont.


*call method lcl_alv->build_fieldcat.


    CALL METHOD go_alv->set_table_for_first_display
      EXPORTING
        i_structure_name = 'TY_FINAL_TABLE'
        is_layout        = Ls_layo
      CHANGING
        it_outtab        = gt_final_table
        it_fieldcatalog  = gt_fieldcat.


  ENDMETHOD.


  METHOD pi_chart.

* Step1
*Create a ref for  CL_GUI_CUSTOM_CONTAINER

    CREATE OBJECT go_pi_cont
      EXPORTING
        container_name = 'CSR1'.


*Step 2.
* Create a ref for CL_GUI_ALV_GRID.

    CREATE OBJECT  go_pi_chart
      EXPORTING
        i_parent = go_pi_cont.


*call method lcl_alv->build_fieldcat.


*    CALL METHOD go_alv->set_table_for_first_display
*      EXPORTING
*        i_structure_name = 'TY_FINAL_TABLE'
*        is_layout        = Ls_layo
*      CHANGING
*        it_outtab        = gt_final_table
*        it_fieldcatalog  = gt_fieldcat.


  ENDMETHOD.

  METHOD pai_200.

    CASE sy-ucomm.

      WHEN 'BACK'.

        CLEAR sy-ucomm.

        LEAVE TO SCREEN 0.

      WHEN '%EX'.

        CLEAR sy-ucomm.

        LEAVE TO SCREEN 0.

      WHEN 'RW'.

        CLEAR sy-ucomm.

        LEAVE TO SCREEN 0.

        LEAVE SCREEN.

    ENDCASE.

  ENDMETHOD.

ENDCLASS.

*&---------------------------------------------------------------------*
*& Module STATUS_0200 OUTPUT
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
MODULE status_0200 OUTPUT.
* SET PF-STATUS 'xxxxxxxx'.
  SET TITLEBAR 'ZTITLE'.

  go_life_cycle->build_fieldcat( ).

  go_life_cycle->show_grid( ).


  go_life_cycle->pi_chart( ).


ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0200  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0200 INPUT.

  go_life_cycle->pai_200( ).

ENDMODULE.